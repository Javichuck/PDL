//// Gramatica ANAGRA
//// Gramatica LR(1)
%token finFichero var id if abrePar cierraPar switch abreLlave cierraLlave
 case break default dosPuntos function igual masIgual menosIgual document punto write prompt return lambda sl coma menor menorIgual mas menos negacion num cad
 %%
PROGRAMA0 : PROGRAMA;

PROGRAMA : BLOQUE SALTO PROGRAMA;
PROGRAMA : FUNCION SALTO PROGRAMA;
PROGRAMA : finFichero;

BLOQUE : var id;
BLOQUE : if abrePar EXPRESION cierraPar SENTENCIA;
BLOQUE : if abrePar EXPRESION cierraPar SALTO abreLlave SALTO CUERPO SALTO cierraLlave;
BLOQUE : SENTENCIA;
BLOQUE : switch abrePar EXPRESION cierraPar SALTO abreLlave SALTO CASE SALTO cierraLlave;

CASE : case EXPRESION dosPuntos CUERPO CASE2;
CASE : default dosPuntos CUERPO;
CASE2 : break SALTO CASE;
CASE2 : CASE;

FUNCION : function id abrePar ARGUMENTOS cierraPar SALTO abreLlave SALTO CUERPO SALTO cierraLlave;

SENTENCIA : id igual EXPRESION;
SENTENCIA : id masIgual EXPRESION;
SENTENCIA : id menosIgual EXPRESION;
SENTENCIA : id abrePar LLAMADAFUN cierraPar;
SENTENCIA : document punto write abrePar EXPRESION cierraPar;
SENTENCIA : prompt abrePar id cierraPar;
SENTENCIA : return RETURNVALUE;

CUERPO : BLOQUE SALTO CUERPO;
CUERPO : lambda;

SALTO : sl SALTO;
SALTO : sl;

RETURNVALUE : EXPRESION;
RETURNVALUE : lambda;

LLAMADAFUN : EXPRESION LLAMADAFUN2;
LLAMADAFUN : lambda;

LLAMADAFUN2 : coma EXPRESION LLAMADAFUN2;
LLAMADAFUN2 : lambda;

ARGUMENTOS : id ARGUMENTOS2;
ARGUMENTOS : lambda;

ARGUMENTOS2 : coma id ARGUMENTOS2;
ARGUMENTOS2 : lambda;

EXPRESION : EXPRESION menor ARITMETICA;
EXPRESION : EXPRESION menorIgual ARITMETICA;
EXPRESION : ARITMETICA;

ARITMETICA : ARITMETICA mas SIMPLE;
ARITMETICA : ARITMETICA menos SIMPLE;
ARITMETICA : SIMPLE;

SIMPLE : negacion SIMPLE;
SIMPLE : abrePar EXPRESION cierraPar;
SIMPLE : id;
SIMPLE : num;
SIMPLE : cad;
SIMPLE : id abrePar LLAMADAFUN cierraPar;